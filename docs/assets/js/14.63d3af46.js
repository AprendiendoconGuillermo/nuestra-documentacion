(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{403:function(a,s,e){"use strict";e.r(s);var t=e(31),r=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"_4-modulo-iv-tipos-de-datos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-modulo-iv-tipos-de-datos"}},[a._v("#")]),a._v(" 4. Módulo IV. Tipos de Datos")]),a._v(" "),e("h2",{attrs:{id:"_4-1-primitivos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-primitivos"}},[a._v("#")]),a._v(" 4.1 Primitivos")]),a._v(" "),e("p",[a._v("Representan un dato único y no se consideran objetos; y Java soporta 8 tipos de datos primitivos y son los que se indican en la Tabla 1.")]),a._v(" "),e("div",{staticStyle:{"text-align":"center"}},[e("img",{attrs:{src:a.$withBase("/img/tipos-primitivos.png"),alt:"  Tabla 1. Sánchez Allende, J. Tipos primitivos Java"}}),a._v(" "),e("p",[a._v("Tabla 1. Sánchez Allende, J. Tipos primitivos Java")])]),a._v(" "),e("p",[a._v("Los tipos primitivos se pueden clasificar en:")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("Números enteros")]),a._v(" ← permiten representar número enteros positivos y negativos con distintos rangos de valores.")]),a._v(" "),e("li",[e("strong",[a._v("Números reales")]),a._v(" ← se dividen en long y float, dependiendo la cantidad de decimales que puedan abarcar.")]),a._v(" "),e("li",[e("strong",[a._v("Caracteres")]),a._v(" ← representa cualquier carácter individual.")]),a._v(" "),e("li",[e("strong",[a._v("Booleano")]),a._v(" ← guarda un valor lógico que puede ser verdadero (true) y falso (false).")])]),a._v(" "),e("h3",{attrs:{id:"_4-1-1-literales"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-literales"}},[a._v("#")]),a._v(" 4.1.1. Literales")]),a._v(" "),e("p",[a._v("En el punto anterior vimos los tipos primitivos, ahora toca ver cómo asignar los valores.")]),a._v(" "),e("h4",{attrs:{id:"_4-1-1-1-numeros-enteros"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-1-numeros-enteros"}},[a._v("#")]),a._v(" 4.1.1.1. Números enteros")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),a._v(" variableByte "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("23")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("short")]),a._v(" variableShort "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("23")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" variableInt "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("23")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" variableLong "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("23")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),e("p",[e("strong",[a._v("Permitido:")]),a._v(" se pueden usar los siguientes formatos:")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("En decimal:")]),a._v(" 23")]),a._v(" "),e("li",[e("strong",[a._v("En octal:")]),a._v(" 023 ← siempre empieza por 0, seguido de dígitos octales (del 0 a 7)")]),a._v(" "),e("li",[e("strong",[a._v("En hexadecimal:")]),a._v(" 0x15 ← siempre empieza por 0x seguido de dígitos hexadecimales del 0 a 9 y de la ‘a’ a la ‘f’ o de la ‘A’ a la ‘F’.")])])]),a._v(" "),e("h4",{attrs:{id:"_4-1-1-2-numeros-reales"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-2-numeros-reales"}},[a._v("#")]),a._v(" 4.1.1.2. Números reales")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("float")]),a._v(" variableFloat "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("23.3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" variableDouble "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("23.3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),e("p",[e("strong",[a._v("Permitido:")])]),a._v(" "),e("ul",[e("li",[a._v("Si queremos especificar que es un tipo float podemos colocar al final del valor una ele minúscula o mayúscula."),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("float")]),a._v(" variableFloat "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("23.3L")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("float")]),a._v(" variableFloat "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("23.3l")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("\n")])])])]),a._v(" "),e("li",[a._v("Si queremos especificar que es un tipo double podemos colocar al final del valor una de minúscula o mayúscula."),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" variableDouble "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("23.3D")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" variableDouble "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("23.3d")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])])])])]),a._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[a._v("WARNING")]),a._v(" "),e("p",[e("strong",[a._v("Cuidado:")]),a._v(" los números reales deben llevar siempre un punto decimal o, de no tenerlo se debe indicar un exponente representado por la letra en minúscula o mayúscula."),e("br"),a._v(" "),e("strong",[e("code",[a._v("1e3")])]),a._v(" que es lo mismo que "),e("strong",[e("code",[a._v("1 x 10^3")])]),e("br"),a._v(" "),e("strong",[e("code",[a._v("3.4E-5")])]),a._v(" que es lo mismo "),e("strong",[e("code",[a._v("3.4 x 10^-5")])])])]),a._v(" "),e("h4",{attrs:{id:"_4-1-1-3-booleanos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-3-booleanos"}},[a._v("#")]),a._v(" 4.1.1.3. Booleanos")]),a._v(" "),e("p",[a._v("Sólo pueden tener dos valores: "),e("strong",[e("code",[a._v("true y false")])]),a._v(", y se escriben siempre en minúscula.")]),a._v(" "),e("h4",{attrs:{id:"_4-1-1-3-caracteres-y-cadenas"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-3-caracteres-y-cadenas"}},[a._v("#")]),a._v(" 4.1.1.3. Caracteres y Cadenas")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),a._v(" variableChar "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" ‘a’"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" variableString "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" “"),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Aprendiendo")]),a._v(" con "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Guillermo")]),a._v("”"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),e("p",[e("strong",[a._v("Permitido:")]),a._v(" los caracteres pueden ser expresados por su table Unicode, en octal o en hexadecimal."),e("br"),a._v(" "),e("strong",[e("code",[a._v("‘\\u00A3’")])]),a._v(" ← en hexadecimal"),e("br"),a._v(" "),e("strong",[e("code",[a._v("‘\\102’")])]),a._v(" ← en octal")])]),a._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[a._v("WARNING")]),a._v(" "),e("p",[e("strong",[a._v("Cuidado:")]),a._v(" los caracteres van siempre en comillas simples "),e("strong",[e("code",[a._v("‘’")])]),a._v(" ,mientras que las cadenas van siempre con comillas doble "),e("strong",[e("code",[a._v("“”")])]),a._v(".")])])])}),[],!1,null,null,null);s.default=r.exports}}]);